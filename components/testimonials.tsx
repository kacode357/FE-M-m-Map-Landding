"use client"

import { useState, useEffect, useRef } from "react"
import { Star, Quote, ChevronLeft, ChevronRight } from "lucide-react"

export default function Testimonials() {
  const [isVisible, setIsVisible] = useState(false)
  const [currentTestimonial, setCurrentTestimonial] = useState(0)
  const sectionRef = useRef<HTMLElement>(null)

  const testimonials = [
    {
      name: "Nguy·ªÖn Minh Anh",
      role: "Food Blogger",
      location: "H√† N·ªôi",
      avatar: "/placeholder.svg?height=80&width=80",
      rating: 5,
      content:
        "MƒÉm Map th·ª±c s·ª± l√† ·ª©ng d·ª•ng tuy·ªát v·ªùi! AI chatbot r·∫•t th√¥ng minh, lu√¥n g·ª£i √Ω ƒë√∫ng m√≥n ƒÉn theo s·ªü th√≠ch c·ªßa t√¥i. Giao di·ªán ti·∫øng Vi·ªát r·∫•t th√¢n thi·ªán v√† d·ªÖ s·ª≠ d·ª•ng.",
      highlight: "AI chatbot r·∫•t th√¥ng minh",
    },
    {
      name: "Tr·∫ßn VƒÉn H√πng",
      role: "Ch·ªß qu√°n Ph·ªü H√πng",
      location: "TP.HCM",
      avatar: "/placeholder.svg?height=80&width=80",
      rating: 5,
      content:
        "T·ª´ khi s·ª≠ d·ª•ng MƒÉm Map, qu√°n t√¥i c√≥ th√™m nhi·ªÅu kh√°ch h√†ng m·ªõi. T√≠nh nƒÉng AI t·∫°o ·∫£nh m√≥n ƒÉn gi√∫p qu√°n t√¥i c√≥ nh·ªØng h√¨nh ·∫£nh ƒë·∫πp m·∫Øt ƒë·ªÉ qu·∫£ng b√°.",
      highlight: "C√≥ th√™m nhi·ªÅu kh√°ch h√†ng m·ªõi",
    },
    {
      name: "L√™ Th·ªã Mai",
      role: "Nh√¢n vi√™n vƒÉn ph√≤ng",
      location: "ƒê√† N·∫µng",
      avatar: "/placeholder.svg?height=80&width=80",
      rating: 5,
      content:
        "M√¨nh r·∫•t th√≠ch t√≠nh nƒÉng t√¨m qu√°n ƒÉn g·∫ßn ƒë√¢y c·ªßa MƒÉm Map. Ch·ªâ c·∫ßn h·ªèi AI l√† c√≥ ngay danh s√°ch qu√°n ngon, ti·∫øt ki·ªám th·ªùi gian t√¨m ki·∫øm r·∫•t nhi·ªÅu.",
      highlight: "Ti·∫øt ki·ªám th·ªùi gian t√¨m ki·∫øm",
    },
    {
      name: "Ph·∫°m ƒê·ª©c Th√†nh",
      role: "Ch·ªß qu√°n B√∫n B√≤ Hu·∫ø",
      location: "Hu·∫ø",
      avatar: "/placeholder.svg?height=80&width=80",
      rating: 5,
      content:
        "MƒÉm Map gi√∫p t√¥i qu·∫£n l√Ω ƒë√°nh gi√° kh√°ch h√†ng m·ªôt c√°ch chuy√™n nghi·ªáp. T√¥i c√≥ th·ªÉ ph·∫£n h·ªìi nhanh ch√≥ng v√† c·∫£i thi·ªán ch·∫•t l∆∞·ª£ng ph·ª•c v·ª•.",
      highlight: "Qu·∫£n l√Ω ƒë√°nh gi√° chuy√™n nghi·ªáp",
    },
    {
      name: "Ho√†ng Th·ªã Lan",
      role: "Sinh vi√™n",
      location: "H√† N·ªôi",
      avatar: "/placeholder.svg?height=80&width=80",
      rating: 5,
      content:
        "L√† sinh vi√™n v·ªõi ng√¢n s√°ch h·∫°n ch·∫ø, MƒÉm Map gi√∫p m√¨nh t√¨m ƒë∆∞·ª£c nh·ªØng qu√°n ƒÉn ngon m√† gi√° c·∫£ ph·∫£i chƒÉng. AI hi·ªÉu r√µ nhu c·∫ßu c·ªßa m√¨nh.",
      highlight: "T√¨m qu√°n ƒÉn gi√° ph·∫£i chƒÉng",
    },
    {
      name: "V≈© Minh Tu·∫•n",
      role: "Ch·ªß chu·ªói qu√°n C∆°m T·∫•m",
      location: "TP.HCM",
      avatar: "/placeholder.svg?height=80&width=80",
      rating: 5,
      content:
        "V·ªõi 5 chi nh√°nh, MƒÉm Map gi√∫p t√¥i qu·∫£n l√Ω t·∫•t c·∫£ m·ªôt c√°ch hi·ªáu qu·∫£. Doanh thu tƒÉng 30% sau 3 th√°ng s·ª≠ d·ª•ng ·ª©ng d·ª•ng.",
      highlight: "Doanh thu tƒÉng 30%",
    },
  ]

  useEffect(() => {
    const observer = new IntersectionObserver(
      ([entry]) => {
        if (entry.isIntersecting) {
          setIsVisible(true)
        }
      },
      { threshold: 0.1 },
    )

    if (sectionRef.current) {
      observer.observe(sectionRef.current)
    }

    return () => observer.disconnect()
  }, [])

  useEffect(() => {
    const interval = setInterval(() => {
      setCurrentTestimonial((prev) => (prev + 1) % testimonials.length)
    }, 5000)
    return () => clearInterval(interval)
  }, [])

  const nextTestimonial = () => {
    setCurrentTestimonial((prev) => (prev + 1) % testimonials.length)
  }

  const prevTestimonial = () => {
    setCurrentTestimonial((prev) => (prev - 1 + testimonials.length) % testimonials.length)
  }

  return (
    <section ref={sectionRef} id="testimonials" className="py-20 md:py-32 relative overflow-hidden">
      {/* Background */}
      <div className="absolute inset-0 bg-gradient-to-br from-orange-50 via-yellow-50 to-red-50"></div>
      <div className="absolute top-20 left-20 w-64 h-64 bg-mam-orange/10 rounded-full blur-3xl"></div>
      <div className="absolute bottom-20 right-20 w-80 h-80 bg-mam-yellow/10 rounded-full blur-3xl"></div>

      <div className="relative container mx-auto px-4">
        {/* Section Title */}
        <div
          className={`text-center mb-16 transition-all duration-1000 ${isVisible ? "opacity-100 translate-y-0" : "opacity-0 translate-y-10"}`}
        >
          <h2 className="font-baloo text-4xl md:text-5xl lg:text-6xl font-bold text-gray-800 mb-6">
            Ng∆∞·ªùi d√πng n√≥i g√¨ v·ªÅ <span className="text-mam-orange">MƒÉm Map</span>?
          </h2>
          <p className="font-comfortaa text-lg md:text-xl text-gray-600 max-w-3xl mx-auto">
            H√†ng ngh√¨n ng∆∞·ªùi d√πng v√† ch·ªß qu√°n ƒë√£ tin t∆∞·ªüng v√† s·ª≠ d·ª•ng MƒÉm Map m·ªói ng√†y
          </p>
        </div>

        {/* Stats */}
        <div
          className={`grid grid-cols-2 md:grid-cols-4 gap-8 mb-16 transition-all duration-1000 delay-200 ${isVisible ? "opacity-100 translate-y-0" : "opacity-0 translate-y-10"}`}
        >
          {[
            { number: "4.8", suffix: "/5", label: "ƒê√°nh gi√° trung b√¨nh", icon: "‚≠ê" },
            { number: "10K+", suffix: "", label: "Ng∆∞·ªùi d√πng h√†i l√≤ng", icon: "üë•" },
            { number: "50K+", suffix: "", label: "ƒê√°nh gi√° t√≠ch c·ª±c", icon: "üí¨" },
            { number: "99%", suffix: "", label: "T·ª∑ l·ªá h√†i l√≤ng", icon: "‚ù§Ô∏è" },
          ].map((stat, index) => (
            <div key={index} className="text-center">
              <div className="text-4xl mb-2">{stat.icon}</div>
              <div className="font-baloo text-3xl md:text-4xl font-bold text-mam-orange mb-1">
                {stat.number}
                {stat.suffix}
              </div>
              <div className="font-comfortaa text-gray-600 text-sm">{stat.label}</div>
            </div>
          ))}
        </div>

        {/* Main Testimonial */}
        <div className="relative max-w-4xl mx-auto mb-16">
          <div
            className={`transition-all duration-1000 delay-400 ${isVisible ? "opacity-100 scale-100" : "opacity-0 scale-95"}`}
          >
            <div className="bg-white/80 backdrop-blur-sm rounded-3xl p-8 md:p-12 shadow-2xl border border-white/20 relative overflow-hidden">
              {/* Quote Icon */}
              <div className="absolute top-6 left-6 opacity-10">
                <Quote className="w-16 h-16 text-mam-orange" />
              </div>

              {/* Content */}
              <div className="relative z-10">
                {/* Rating */}
                <div className="flex justify-center mb-6">
                  {[...Array(testimonials[currentTestimonial].rating)].map((_, i) => (
                    <Star key={i} className="w-6 h-6 text-yellow-400 fill-current" />
                  ))}
                </div>

                {/* Testimonial Text */}
                <blockquote className="font-comfortaa text-lg md:text-xl text-gray-700 text-center mb-8 leading-relaxed">
                  "{testimonials[currentTestimonial].content}"
                </blockquote>

                {/* Highlight */}
                <div className="text-center mb-8">
                  <span className="inline-block bg-mam-orange/10 text-mam-orange px-4 py-2 rounded-full font-comfortaa font-medium text-sm">
                    {testimonials[currentTestimonial].highlight}
                  </span>
                </div>

                {/* Author */}
                <div className="flex items-center justify-center">
                  <img
                    src={testimonials[currentTestimonial].avatar || "/placeholder.svg"}
                    alt={testimonials[currentTestimonial].name}
                    className="w-16 h-16 rounded-full object-cover mr-4 shadow-lg"
                  />
                  <div className="text-center">
                    <div className="font-comfortaa font-bold text-gray-800 text-lg">
                      {testimonials[currentTestimonial].name}
                    </div>
                    <div className="font-comfortaa text-mam-orange font-medium">
                      {testimonials[currentTestimonial].role}
                    </div>
                    <div className="font-comfortaa text-gray-500 text-sm">
                      {testimonials[currentTestimonial].location}
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>

          {/* Navigation */}
          <button
            onClick={prevTestimonial}
            className="absolute left-4 top-1/2 transform -translate-y-1/2 w-12 h-12 bg-white/80 backdrop-blur-sm rounded-full flex items-center justify-center shadow-lg hover:shadow-xl transition-all duration-300 hover:scale-110"
          >
            <ChevronLeft className="w-6 h-6 text-gray-600" />
          </button>
          <button
            onClick={nextTestimonial}
            className="absolute right-4 top-1/2 transform -translate-y-1/2 w-12 h-12 bg-white/80 backdrop-blur-sm rounded-full flex items-center justify-center shadow-lg hover:shadow-xl transition-all duration-300 hover:scale-110"
          >
            <ChevronRight className="w-6 h-6 text-gray-600" />
          </button>
        </div>

        {/* Testimonial Grid */}
        <div
          className={`grid md:grid-cols-3 gap-6 transition-all duration-1000 delay-600 ${isVisible ? "opacity-100 translate-y-0" : "opacity-0 translate-y-10"}`}
        >
          {testimonials.slice(0, 3).map((testimonial, index) => (
            <div
              key={index}
              className="bg-white/60 backdrop-blur-sm rounded-xl p-6 shadow-lg hover:shadow-xl transition-all duration-300 transform hover:scale-105 border border-white/20"
            >
              <div className="flex items-center mb-4">
                <img
                  src={testimonial.avatar || "/placeholder.svg"}
                  alt={testimonial.name}
                  className="w-12 h-12 rounded-full object-cover mr-3"
                />
                <div>
                  <div className="font-comfortaa font-bold text-gray-800">{testimonial.name}</div>
                  <div className="font-comfortaa text-mam-orange text-sm">{testimonial.role}</div>
                </div>
              </div>
              <div className="flex mb-3">
                {[...Array(testimonial.rating)].map((_, i) => (
                  <Star key={i} className="w-4 h-4 text-yellow-400 fill-current" />
                ))}
              </div>
              <p className="font-comfortaa text-gray-600 text-sm leading-relaxed">
                "{testimonial.content.slice(0, 120)}..."
              </p>
            </div>
          ))}
        </div>

        {/* Dots Indicator */}
        <div className="flex justify-center mt-8 space-x-2">
          {testimonials.map((_, index) => (
            <button
              key={index}
              onClick={() => setCurrentTestimonial(index)}
              className={`w-3 h-3 rounded-full transition-all duration-300 ${
                currentTestimonial === index ? "bg-mam-orange scale-125" : "bg-gray-300 hover:bg-gray-400"
              }`}
            />
          ))}
        </div>
      </div>
    </section>
  )
}
